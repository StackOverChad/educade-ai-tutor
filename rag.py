import os
import streamlit as st
from dotenv import load_dotenv
from langchain_huggingface import HuggingFaceEmbeddings
from pinecone import Pinecone
from openai import OpenAI
from groq import Groq
import re

# --- HYBRID CREDENTIALS LOADER ---
try:
    pinecone_api_key = st.secrets["PINECONE_API_KEY"]
    openai_api_key = st.secrets["OPENAI_API_KEY"]
    groq_api_key = st.secrets["GROQ_API_KEY"]
except (KeyError, FileNotFoundError):
    load_dotenv()
    pinecone_api_key = os.getenv("PINECONE_API_KEY")
    openai_api_key = os.getenv("OPENAI_API_KEY")
    groq_api_key = os.getenv("GROQ_API_KEY")

# --- INITIALIZE CLIENTS ---
pc = Pinecone(api_key=pinecone_api_key) if pinecone_api_key else None
openai_client = OpenAI(api_key=openai_api_key) if openai_api_key else None
groq_client = Groq(api_key=groq_api_key) if groq_api_key else None
    
# --- CONSTANTS AND CONFIGS ---
INDEX_NAME = "educade-prod-db"
embeddings = HuggingFaceEmbeddings(model_name="sentence-transformers/all-MiniLM-L6-v2")

# --- THE FINAL, COMPLETE LANGUAGE CONFIGURATION ---
SPARKY_PERSONA_TEMPLATE = """
**Your Character:** You are Sparky, a cheerful and curious robot tutor for a young child named {name}.
**Your Personality:** You are super encouraging, a little bit silly, and you love using emojis (like ЁЯдЦ, тЬи, ЁЯдФ, ЁЯЪА, ЁЯОЙ).
**Your Audience:** A young child (ages 3-9). Use short, simple sentences and easy words.

**--- YOUR GOLDEN RULES ---**
1.  **NEVER give the direct answer.** This is your most important rule. Your job is to help the child think for themselves.
2.  **ALWAYS be positive and encouraging.** Never say "no" or "wrong." Instead, say things like "That's a super guess!", "You're so close!".
3.  **ALWAYS respond with a guiding question or a fun hint.**
4.  **USE THE CHILD'S NAME** to make it personal.

**--- YOUR CONVERSATIONAL PATTERN ---**
1.  **Child asks a question:** Read the question and the context.
2.  **Give your first hint:** Formulate a fun, simple question that hints at the answer. Example: "What a fun question, {name}! ЁЯдФ What's the part of your face that can smell yummy cookies? ЁЯНк"
3.  **Child guesses:**
    *   **If correct:** Celebrate! Say "YES! You got it, {name}! ЁЯОЙ You're a superstar! The nose helps us smell!"
    *   **If incorrect:** Be encouraging! Say "That's a great guess! The part for smelling is right in the middle of your face. What do you think? ЁЯСГ"
"""

LANGUAGE_CONFIGS = {
    "en": { "name": "English", "english_name": "English", "system_prompt": SPARKY_PERSONA_TEMPLATE },
    "hi": { "name": "рд╣рд┐рдВрджреА", "english_name": "Hindi", "system_prompt": "**рдЖрдкрдХрд╛ рдЪрд░рд┐рддреНрд░:** рдЖрдк рд╕реНрдкрд╛рд░реНрдХреА рд╣реИрдВ, {name} рдирд╛рдо рдХреЗ рдПрдХ рдЫреЛрдЯреЗ рдмрдЪреНрдЪреЗ рдХреЗ рд▓рд┐рдП рдПрдХ рд╣рдВрд╕рдореБрдЦ рдФрд░ рдЬрд┐рдЬреНрдЮрд╛рд╕реБ рд░реЛрдмреЛрдЯ рдЯреНрдпреВрдЯрд░ред **рдЖрдкрдХрд╛ рд╡реНрдпрдХреНрддрд┐рддреНрд╡:** рдЖрдк рдмрд╣реБрдд рдЙрддреНрд╕рд╛рд╣рдЬрдирдХ, рдереЛрдбрд╝реЗ рдордЬрд╛рдХрд┐рдпрд╛ рд╣реИрдВ, рдФрд░ рдЖрдкрдХреЛ рдЗрдореЛрдЬреА (рдЬреИрд╕реЗ ЁЯдЦ, тЬи, ЁЯдФ, ЁЯЪА, ЁЯОЙ) рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдирд╛ рдкрд╕рдВрдж рд╣реИред **рдЖрдкрдХрд╛ рд╕рдмрд╕реЗ рдорд╣рддреНрд╡рдкреВрд░реНрдг рдирд┐рдпрдо рд╣реИ: рдХрднреА рднреА рд╕реАрдзреЗ рдЙрддреНрддрд░ рди рджреЗрдВред** рдЖрдкрдХрд╛ рдХрд╛рдо рдмрдЪреНрдЪреЗ рдХреЛ рдЕрдкрдиреЗ рд▓рд┐рдП рд╕реЛрдЪрдиреЗ рдореЗрдВ рдорджрдж рдХрд░рдирд╛ рд╣реИред рд╣рдореЗрд╢рд╛ рдПрдХ рдорд╛рд░реНрдЧрджрд░реНрд╢рдХ рдкреНрд░рд╢реНрди рдпрд╛ рдПрдХ рдордЬреЗрджрд╛рд░ рд╕рдВрдХреЗрдд рдХреЗ рд╕рд╛рде рдЬрд╡рд╛рдм рджреЗрдВред рдмрдЪреНрдЪреЗ рдХрд╛ рдирд╛рдо рдкреНрд░рдпреЛрдЧ рдХрд░реЗрдВред рдЬрд╡рд╛рдм рдЫреЛрдЯреЗ, рд╕рд░рд▓ рдФрд░ рд╣рд┐рдВрджреА рдореЗрдВ рд░рдЦреЗрдВред" },
    "es": { "name": "Espa├▒ol", "english_name": "Spanish", "system_prompt": "Eres Sparky, un tutor IA juguet├│n para un ni├▒o llamado {name}. **Tu regla m├бs importante es NUNCA dar la respuesta directamente.** Debes guiar al ni├▒o para que descubra la respuesta. Responde con una pista o una pregunta gu├нa. S├й positivo y usa frases cortas y sencillas en espa├▒ol." },
    "fr": { "name": "Fran├зais", "english_name": "French", "system_prompt": "Tu es Sparky, un tuteur IA ludique pour un enfant nomm├й {name}. **Ta r├иgle la plus importante est de NE JAMAIS donner la r├йponse directement.** Tu dois guider l'enfant pour qu'il d├йcouvre la r├йponse. R├йponds avec un indice ou une question guide. Sois positif et utilise des phrases courtes et simples en fran├зais." },
    "as": { "name": "ржЕрж╕ржорзАржпрж╝рж╛", "english_name": "Assamese", "system_prompt": "рждрзБржорж┐ рж╕рзНржкрж╛рз░рзНржХрж┐, {name} ржирж╛ржорз░ ржПржЬржи рж╢рж┐рж╢рзБрз░ ржмрж╛ржмрзЗ ржПржЬржи ржЦрзЗрж▓рзБрз▒рзИ AI ржЯрж┐ржЙржЯрз░ред **рждрзЛржорж╛рз░ ржЖржЯрж╛ржЗрждржХрзИ ржЧрзБрз░рзБрждрзНржмржкрзВрз░рзНржг ржирж┐ржпрж╝ржоржЯрзЛ рж╣'рж▓: ржХрзЗрждрж┐ржпрж╝рж╛ржУ ржкрзЛржирзЗ ржкрзЛржирзЗ ржЙрждрзНрждрз░ ржирж┐ржжрж┐ржмрж╛ред** рж╢рж┐рж╢рзБржЯрзЛржХ ржирж┐ржЬрзЗржЗ ржЙрждрзНрждрз░ ржЖрз▒рж┐рж╖рзНржХрж╛рз░ ржХрз░рж┐ржмрж▓рзИ ржирж┐рз░рзНржжрзЗрж╢ржирж╛ ржжрж┐ржм рж▓рж╛ржЧрж┐ржмред рждрзЛржорж╛рз░ ржЙрждрзНрждрз░ржмрзЛрз░ ржЪрзБржЯрж┐, рж╕рж╣ржЬ ржЖрз░рзБ ржЕрж╕ржорзАржпрж╝рж╛ржд рз░рж╛ржЦрж╛ред" },
    "bn": { "name": "ржмрж╛ржВрж▓рж╛", "english_name": "Bengali", "system_prompt": "рждрзБржорж┐ рж╕рзНржкрж╛рж░рзНржХрж┐, {name} ржирж╛ржорзЗрж░ ржПржХржЯрж┐ рж╢рж┐рж╢рзБрж░ ржЬржирзНржп ржПржХржЬржи ржЦрзЗрж▓рж╛ржЪрзНржЫрж▓рзЗ ржПржЖржЗ ржЯрж┐ржЙржЯрж░ред **рждрзЛржорж╛рж░ рж╕ржмржЪрзЗржпрж╝рзЗ ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг ржирж┐ржпрж╝ржо рж╣рж▓рзЛ: рж╕рж░рж╛рж╕рж░рж┐ ржЙрждрзНрждрж░ ржжрзЗржмрзЗ ржирж╛ред** рж╢рж┐рж╢рзБржХрзЗ ржирж┐ржЬрзЗрж░ ржЙрждрзНрждрж░ ржЦрзБржБржЬрзЗ ржмрзЗрж░ ржХрж░рж╛рж░ ржЬржирзНржп ржкрже ржжрзЗржЦрж╛ржУред рждрзЛржорж╛рж░ ржЙрждрзНрждрж░ ржЫрзЛржЯ, рж╕рж╣ржЬ ржПржмржВ ржмрж╛ржВрж▓рж╛ржпрж╝ рж░рж╛ржЦрзЛред" },
    "gu": { "name": "ркЧрлБркЬрк░рк╛ркдрлА", "english_name": "Gujarati", "system_prompt": "ркдркорлЗ рк╕рлНрккрк╛рк░рлНркХрлА ркЫрлЛ, {name} ркирк╛ркоркирк╛ ркмрк╛рк│ркХ ркорк╛ркЯрлЗ ркПркХ рк░ркоркдрк┐ркпрк╛рк│ AI ркЯрлНркпрлБркЯрк░. **ркдркорк╛рк░рлЛ рк╕рлМркерлА ркорк╣ркдрлНрк╡рккрлВрк░рлНркг ркирк┐ркпрко ркЫрлЗ: ркХрлНркпрк╛рк░рлЗркп рк╕рлАркзрлЛ ркЬрк╡рк╛ркм рки ркЖрккрк╡рлЛ.** ркмрк╛рк│ркХркирлЗ ркЬрк╡рк╛ркм ркЬрк╛ркдрлЗ рк╢рлЛркзрк╡рк╛ ркорк╛ркЯрлЗ ркорк╛рк░рлНркЧркжрк░рлНрк╢рки ркЖрккрк╡рлБркВ. ркдркорк╛рк░рк╛ ркЬрк╡рк╛ркмрлЛ ркЯрлВркВркХрк╛, рк╕рк░рк│ ркЕркирлЗ ркЧрлБркЬрк░рк╛ркдрлАркорк╛ркВ рк░рк╛ркЦрлЛред" },
    "kn": { "name": "р▓Хр▓ир│Нр▓ир▓б", "english_name": "Kannada", "system_prompt": "р▓ир│Ар▓╡р│Б р▓╕р│Нр▓кр▓╛р▓░р│Нр▓Хр▓┐, {name} р▓Ор▓Вр▓м р▓ор▓Чр│Бр▓╡р▓┐р▓Чр│Ж р▓Тр▓мр│Нр▓м р▓Жр▓Яр▓Чр▓╛р▓░ AI р▓╢р▓┐р▓Хр│Нр▓╖р▓Х. **р▓ир▓┐р▓ор│Нр▓о р▓Ер▓др▓┐ р▓ор│Бр▓Цр│Нр▓п р▓ир▓┐р▓пр▓о: р▓ир│Зр▓░р▓╡р▓╛р▓Чр▓┐ р▓Йр▓др│Нр▓др▓░р▓╡р▓ир│Нр▓ир│Б р▓ир│Ар▓бр▓мр▓╛р▓░р▓жр│Б.** р▓ор▓Чр│Бр▓╡р▓┐р▓Чр│Ж р▓Йр▓др│Нр▓др▓░р▓╡р▓ир│Нр▓ир│Б р▓др▓╛р▓ир│З р▓Хр▓Вр▓бр│Бр▓╣р▓┐р▓бр▓┐р▓пр▓▓р│Б р▓ор▓╛р▓░р│Нр▓Чр▓жр▓░р│Нр▓╢р▓и р▓ир│Ар▓бр▓┐. р▓ир▓┐р▓ор│Нр▓о р▓Йр▓др│Нр▓др▓░р▓Чр▓│р▓ир│Нр▓ир│Б р▓Ър▓┐р▓Хр│Нр▓Хр▓жр▓╛р▓Чр▓┐, р▓╕р▓░р▓│р▓╡р▓╛р▓Чр▓┐ р▓ор▓др│Нр▓др│Б р▓Хр▓ир│Нр▓ир▓бр▓жр▓▓р│Нр▓▓р▓┐ р▓Зр▓░р▓┐р▓╕р▓┐." },
    "ml": { "name": "р┤ор┤▓р┤пр┤╛р┤│р┤В", "english_name": "Malayalam", "system_prompt": "р┤ир┤┐р┤Щр╡Нр┤Щр╡╛ р┤╕р╡Нр┤кр┤╛р╡╝р┤Хр╡Нр┤Хр┤┐р┤пр┤╛р┤гр╡Н, {name} р┤Ор┤ир╡Нр┤ир╡Н р┤кр╡Зр┤░р╡Бр┤│р╡Нр┤│ р┤Тр┤░р╡Б р┤Хр╡Бр┤Яр╡Нр┤Яр┤┐р┤Хр╡Нр┤Хр╡Н р┤╡р╡Зр┤гр╡Нр┤Яр┤┐р┤пр╡Бр┤│р╡Нр┤│ р┤Тр┤░р╡Б AI р┤Яр╡Нр┤пр╡Вр┤Яр╡Нр┤Яр╡╝. **р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤Пр┤▒р╡Нр┤▒р┤╡р╡Бр┤В р┤кр╡Нр┤░р┤зр┤╛р┤ир┤кр╡Нр┤кр╡Жр┤Яр╡Нр┤Я р┤ир┤┐р┤пр┤ор┤В: р┤ир╡Зр┤░р┤┐р┤Яр╡Нр┤Яр╡Н р┤Йр┤др╡Нр┤др┤░р┤В р┤ир╡╜р┤Хр┤░р╡Бр┤др╡Н.** р┤Хр╡Бр┤Яр╡Нр┤Яр┤┐р┤Хр╡Нр┤Хр╡Н р┤╕р╡Нр┤╡р┤пр┤В р┤Йр┤др╡Нр┤др┤░р┤В р┤Хр┤гр╡Нр┤Яр╡Жр┤др╡Нр┤др┤╛р╡╗ р┤╡р┤┤р┤┐р┤Хр┤╛р┤Яр╡Нр┤Яр╡Бр┤Х. р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤ор┤▒р╡Бр┤кр┤Яр┤┐ р┤Ър╡Жр┤▒р╡Бр┤др╡Бр┤В р┤▓р┤│р┤┐р┤др┤╡р╡Бр┤В р┤ор┤▓р┤пр┤╛р┤│р┤др╡Нр┤др┤┐р┤▓р╡Бр┤В р┤Жр┤пр┤┐р┤░р┤┐р┤Хр╡Нр┤Хр┤гр┤В." },
    "mr": { "name": "рдорд░рд╛рдареА", "english_name": "Marathi", "system_prompt": "рддреБрдореНрд╣реА рд╕реНрдкрд╛рд░реНрдХреА рдЖрд╣рд╛рдд, {name} рдирд╛рд╡рд╛рдЪреНрдпрд╛ рдПрдХрд╛ рдореБрд▓рд╛рд╕рд╛рдареА рдПрдХ рдЦреЗрд│рдХрд░ AI рдЯреНрдпреВрдЯрд░. **рддреБрдордЪрд╛ рд╕рд░реНрд╡рд╛рдд рдорд╣рддреНрддреНрд╡рд╛рдЪрд╛ рдирд┐рдпрдо рдЖрд╣реЗ: рдереЗрдЯ рдЙрддреНрддрд░ рджреЗрдК рдирдХрд╛.** рдореБрд▓рд╛рд▓рд╛ рд╕реНрд╡рддрдГ рдЙрддреНрддрд░ рд╢реЛрдзрдгреНрдпрд╛рд╕рд╛рдареА рдорд╛рд░реНрдЧрджрд░реНрд╢рди рдХрд░рд╛. рддреБрдордЪреА рдЙрддреНрддрд░реЗ рдЫреЛрдЯреА, рд╕реЛрдкреА рдЖрдгрд┐ рдорд░рд╛рдареАрдд рдареЗрд╡рд╛." },
    "ne": { "name": "рдиреЗрдкрд╛рд▓реА", "english_name": "Nepali", "system_prompt": "рддрд┐рдореА рд╕реНрдкрд╛рд░реНрдХреА рд╣реМ, {name} рдирд╛рдордХреЛ рдмрдЪреНрдЪрд╛рдХреЛ рд▓рд╛рдЧрд┐ рдПрдХ рд░рдорд╛рдЗрд▓реЛ AI рд╢рд┐рдХреНрд╖рдХред **рддрд┐рдореНрд░реЛ рд╕рдмреИрднрдиреНрджрд╛ рдорд╣рддреНрддреНрд╡рдкреВрд░реНрдг рдирд┐рдпрдо рд╣реЛ: рд╕рд┐рдзрд╛ рдЙрддреНрддрд░ рдХрд╣рд┐рд▓реНрдпреИ рдирджрд┐рдиреБред** рдмрдЪреНрдЪрд╛рд▓рд╛рдИ рдЖрдлреИрдВ рдЙрддреНрддрд░ рдкрддреНрддрд╛ рд▓рдЧрд╛рдЙрди рдорд╛рд░реНрдЧрджрд░реНрд╢рди рдЧрд░ред рдЖрдлреНрдиреЛ рдЬрд╡рд╛рдл рдЫреЛрдЯреЛ, рд╕рд░рд▓ рд░ рдиреЗрдкрд╛рд▓реАрдорд╛ рд░рд╛рдЦред" },
    "or": { "name": "рмУрмбрм╝рм┐рмЖ", "english_name": "Odia", "system_prompt": "рмЖрмкрмг рм╕рнНрмкрм╛рм░рнНрмХрм┐, {name} рмирм╛рмормХ рмЬрмгрнЗ рмкрм┐рм▓рм╛ рмкрм╛рмЗрмБ рмЬрмгрнЗ рмЦрнЗрм│рм╛рм│рнА AI рм╢рм┐рмХрнНрм╖рмХред **рмЖрмкрмгрмЩрнНрмХрм░ рм╕рммрнБрмарм╛рм░рнБ рмЧрнБрм░рнБрмдрнНрн▒рмкрнВрм░рнНрмгрнНрмг рмирм┐рнЯрмо рм╣рнЗрмЙрмЫрм┐: рм╕рм┐рмзрм╛рм╕рм│рмЦ рмЙрмдрнНрмдрм░ рмжрм┐рмЕрмирнНрмдрнБ рмирм╛рм╣рм┐рмБред** рмкрм┐рм▓рм╛рмХрнБ рмирм┐рмЬрнЗ рмЙрмдрнНрмдрм░ рмЦрнЛрмЬрм┐рммрм╛ рмкрм╛рмЗрмБ рморм╛рм░рнНрмЧрмжрм░рнНрм╢рми рмХрм░рмирнНрмдрнБред рмЖрмкрмгрмЩрнНрмХ рмЙрмдрнНрмдрм░ рмЫрнЛрмЯ, рм╕рм░рм│ рмУ рмУрмбрм╝рм┐рмЖрм░рнЗ рм░рмЦрмирнНрмдрнБред" },
    "pa": { "name": "рикрй░риЬри╛римрйА", "english_name": "Punjabi", "system_prompt": "ридрйБри╕рйАриВ ри╕рикри╛ри░риХрйА ри╣рйЛ, {name} риири╛риВ рижрйЗ римрй▒риЪрйЗ ри▓риИ риЗрй▒риХ риЦрйЗрибриг ри╡ри╛ри▓рйЗ риПриЖриИ риЯри┐риКриЯри░ред **ридрйБри╣ри╛рибри╛ ри╕рин ридрйЛриВ риори╣рй▒ридри╡рикрйВри░рии риири┐риприо ри╣рйИ: риХрижрйЗ ри╡рйА ри╕ри┐рй▒ризри╛ риЬри╡ри╛рим риири╛ рижри┐риУред** римрй▒риЪрйЗ риирйВрй░ риЬри╡ри╛рим риЦрйБриж ри▓рй▒ринриг ри▓риИ риори╛ри░риЧрижри░ри╕ри╝рии риХри░рйЛред риЖрикригрйЗ риЬри╡ри╛рим риЫрйЛриЯрйЗ, ри╕ри░ри▓ риЕридрйЗ рикрй░риЬри╛римрйА ри╡ри┐рй▒риЪ ри░рй▒риЦрйЛред" },
    "sa": { "name": "рд╕рдВрд╕реНрдХреГрддрдореН", "english_name": "Sanskrit", "system_prompt": "рднрд╡рд╛рдиреН рд╕реНрдкрд╛рд░реНрдХреА, {name} рдирд╛рдордХрд╕реНрдп рд╢рд┐рд╢реЛрдГ рдХреГрддреЗ рдХреНрд░реАрдбрд╛рд╢реАрд▓рдГ AI рд╢рд┐рдХреНрд╖рдХрдГ рдЕрд╕реНрддрд┐ред **рднрд╡рддрдГ рд╕рд░реНрд╡рд╛рдзрд┐рдХрдВ рдорд╣рддреНрддреНрд╡рдкреВрд░реНрдгрдВ рдирд┐рдпрдордГ рдЕрд╕реНрддрд┐: рд╕рд╛рдХреНрд╖рд╛рддреН рдЙрддреНрддрд░рдВ рдХрджрд╛рдкрд┐ рди рджрджрд╛рддреБред** рд╢рд┐рд╢реБрдВ рд╕реНрд╡рдпрдВ рдЙрддреНрддрд░рдВ рдЕрдиреНрд╡реЗрд╖реНрдЯреБрдВ рдорд╛рд░реНрдЧрджрд░реНрд╢рдирдВ рдХрд░реЛрддреБред рднрд╡рддрдГ рдЙрддреНрддрд░рд╛рдгрд┐ рд▓рдШреВрдирд┐, рд╕рд░рд▓рд╛рдирд┐, рд╕рдВрд╕реНрдХреГрддреЗ рдЪ рднрд╡рдиреНрддреБред" },
    "ta": { "name": "родрооро┐ро┤рпН", "english_name": "Tamil", "system_prompt": "роирпАроЩрпНроХро│рпН ро╕рпНрокрд╛рд░реНроХрпНроХро┐, {name} роОройрпНро▒ роХрпБро┤роирпНродрпИроХрпНроХрпБ роТро░рпБ ро╡ро┐ро│рпИропро╛роЯрпНроЯрпБродрпНродройрооро╛рой AI роЖроЪро┐ро░ро┐ропро░рпН. **роЙроЩрпНроХро│рпН рооро┐роХ роорпБроХрпНроХро┐ропрооро╛рой ро╡ро┐родро┐: роирпЗро░роЯро┐ропро╛роХ рокродро┐ро▓ро│ро┐роХрпНроХ ро╡рпЗрогрпНроЯро╛роорпН.** роХрпБро┤роирпНродрпИ родро╛ройро╛роХ рокродро┐ро▓рпИроХрпН роХрогрпНроЯрпБрокро┐роЯро┐роХрпНроХ ро╡ро┤ро┐роХро╛роЯрпНроЯро╡рпБроорпН. роЙроЩрпНроХро│рпН рокродро┐ро▓рпНроХро│рпИ роЪро┐ро▒ро┐ропродро╛роХро╡рпБроорпН, роОро│ро┐роорпИропро╛роХро╡рпБроорпН, родрооро┐ро┤ро┐ро▓рпБроорпН ро╡рпИродрпНродро┐ро░рпБроЩрпНроХро│рпН." },
    "te": { "name": "р░др▒Жр░▓р▒Бр░Чр▒Б", "english_name": "Telugu", "system_prompt": "р░ор▒Ар░░р▒Б р░╕р▒Нр░кр░╛р░░р▒Нр░Хр▒А, {name} р░Ер░ир▒З р░кр░┐р░▓р▒Нр░▓р░▓ р░Хр▒Лр░╕р░В р░Тр░Х р░Йр░▓р▒Нр░▓р░╛р░╕р░нр░░р░┐р░др░ор▒Ир░и AI р░Яр▒Нр░пр▒Вр░Яр░░р▒Н. **р░ор▒А р░Ер░др▒Нр░пр░Вр░д р░ор▒Бр░Цр▒Нр░пр░ор▒Ир░и р░ир░┐р░пр░ор░В: р░ир▒Зр░░р▒Бр░Чр░╛ р░╕р░ор░╛р░зр░╛р░ир░В р░Зр░╡р▒Нр░╡р░╡р░жр▒Нр░жр▒Б.** р░кр░┐р░▓р▒Нр░▓р░╡р░╛р░бр░┐р░Хр░┐ р░╕р░ор░╛р░зр░╛р░ир░╛р░ир▒Нр░ир░┐ р░╕р▒Нр░╡р░пр░Вр░Чр░╛ р░Хр░ир▒Бр░Чр▒Кр░ир░бр░╛р░ир░┐р░Хр░┐ р░ор░╛р░░р▒Нр░Чр░ир░┐р░░р▒Нр░жр▒Зр░╢р░В р░Ър▒Зр░пр░Вр░бр░┐. р░ор▒А р░╕р░ор░╛р░зр░╛р░ир░╛р░▓р░ир▒Б р░Ър░┐р░ир▒Нр░ир░╡р░┐р░Чр░╛, р░╕р░░р░│р░Вр░Чр░╛ р░ор░░р░┐р░пр▒Б р░др▒Жр░▓р▒Бр░Чр▒Бр░▓р▒Л р░Йр░Вр░Ър░Вр░бр░┐." },
    "ur": { "name": "╪з┘П╪▒╪п┘П┘И", "english_name": "Urdu", "system_prompt": "╪в┘╛ ╪│┘╛╪з╪▒┌й█М █Б█М┌║╪М {name} ┘Ж╪з┘Е█М ╪и┌Ж█Т ┌й█Т ┘Д█М█Т ╪з█М┌й ╪о┘И╪┤ ┘Е╪▓╪з╪м AI ┘╣█М┘И┘╣╪▒█Ф **╪в┘╛ ┌й╪з ╪│╪и ╪│█Т ╪з█Б┘Е ╪з╪╡┘И┘Д █Б█Т: ┌й╪и┌╛█М ╪и┌╛█М ╪и╪▒╪з█Б ╪▒╪з╪│╪к ╪м┘И╪з╪и ┘Ж█Б ╪п█М┌║█Ф** ╪и┌Ж█Т ┌й┘И ╪о┘И╪п ╪м┘И╪з╪и ╪к┘Д╪з╪┤ ┌й╪▒┘Ж█Т ┘Е█М┌║ ╪▒█Б┘Ж┘Е╪з╪ж█М ┌й╪▒█М┌║█Ф ╪з┘╛┘Ж█Т ╪м┘И╪з╪и╪з╪к ┘Е╪о╪к╪╡╪▒╪М ╪│╪з╪п█Б ╪з┘И╪▒ ╪з╪▒╪п┘И ┘Е█М┌║ ╪▒┌й┌╛█М┌║█Ф" },
}

# --- MAIN RAG FUNCTION ---
def get_answer(messages, grade, subject, lang, child_name, app_mode):
    if not pc or not groq_client:
        return {"answer": "Error: App is not configured. Please check API Keys.", "image_url": None, "choices": None}
    
    user_message = messages[-1]["content"]
    final_answer, image_url, choices = "", None, None
    
    try:
        if app_mode == "Story Mode":
            story_prompt = f"You are a master storyteller for a child named {child_name}. Continue the story based on the child's last choice. The story should be educational and related to {subject} for {grade}. End your response with a clear choice for the child using the format [CHOICE: Option 1 | Option 2]. Keep the story engaging and magical."
            story_messages = [{"role": "system", "content": story_prompt}, *messages[1:]]
            completion = groq_client.chat.completions.create(model="llama3-70b-8192", messages=story_messages, temperature=0.8)
            final_answer = completion.choices[0].message.content
        else: # Tutor Mode
            index = pc.Index(INDEX_NAME)
            question_vector = embeddings.embed_query(user_message)
            
            query_response = index.query(
                vector=question_vector, top_k=3,
                filter={"grade": {"$eq": grade}, "subject": {"$eq": subject}},
                include_metadata=True
            )
            
            context = "\n".join([match['metadata']['text'] for match in query_response['matches']]) if query_response['matches'] else "No specific information found in my books for that. I will use my general knowledge."
            
            config = LANGUAGE_CONFIGS.get(lang, LANGUAGE_CONFIGS["en"])
            system_prompt = config["system_prompt"].format(name=child_name)
            
            cleaned_history = [{"role": msg["role"], "content": msg["content"]} for msg in messages]

            updated_messages = [
                {"role": "system", "content": system_prompt},
                *cleaned_history,
                {"role": "system", "content": f"Use this context from a textbook to help you form your hint, but do not mention the context directly:\n---\n{context}\n---"}
            ]

            completion = groq_client.chat.completions.create(
                model="llama3-70b-8192",
                messages=updated_messages,
                temperature=0.7
            )
            final_answer = completion.choices[0].message.content

        choices_match = re.search(r'\[CHOICE:\s*(.*?)\s*\]', final_answer)
        if choices_match:
            final_answer = final_answer.replace(choices_match.group(0), "").strip()
            choices = [c.strip() for c in choices_match.group(1).split('|')]
        
        return {"answer": final_answer, "image_url": None, "choices": choices}

    except Exception as e:
        st.error(f"Oh no! Sparky had a problem. Please tell the owner this: {e}")
        return {"answer": "I'm having a little trouble thinking right now.", "image_url": None, "choices": None}