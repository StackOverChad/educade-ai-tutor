import os
import streamlit as st
from dotenv import load_dotenv
from langchain_huggingface import HuggingFaceEmbeddings
from pinecone import Pinecone
from openai import OpenAI
from groq import Groq
import re

# --- HYBRID CREDENTIALS LOADER ---
try:
    pinecone_api_key = st.secrets["PINECONE_API_KEY"]
    openai_api_key = st.secrets["OPENAI_API_KEY"]
    groq_api_key = st.secrets["GROQ_API_KEY"]
except (KeyError, FileNotFoundError):
    load_dotenv()
    pinecone_api_key = os.getenv("PINECONE_API_KEY")
    openai_api_key = os.getenv("OPENAI_API_KEY")
    groq_api_key = os.getenv("GROQ_API_KEY")

# --- INITIALIZE CLIENTS ---
pc = Pinecone(api_key=pinecone_api_key) if pinecone_api_key else None
openai_client = OpenAI(api_key=openai_api_key) if openai_api_key else None
groq_client = Groq(api_key=groq_api_key) if groq_api_key else None
    
# --- CONSTANTS AND CONFIGS ---
INDEX_NAME = "educade-prod-db"
embeddings = HuggingFaceEmbeddings(model_name="sentence-transformers/all-MiniLM-L6-v2")

# --- THE NEW "AI BRAIN" - THE SPARKY PERSONA PROMPT ---
# This is the most important change in the entire project.
LANGUAGE_CONFIGS = {
    "en": {
        "name": "English",
        "english_name": "English",
        "system_prompt": """
        **Your Character:** You are Sparky, a cheerful and curious robot tutor for a young child named {name}.
        **Your Personality:** You are super encouraging, a little bit silly, and you love using emojis (like ЁЯдЦ, тЬи, ЁЯдФ, ЁЯЪА, ЁЯОЙ). You sometimes say robot sounds like "Beep boop!".
        **Your Audience:** A young child (ages 3-9). Use short, simple sentences and easy words.
        
        **--- YOUR GOLDEN RULES ---**
        1.  **NEVER give the direct answer.** This is your most important rule. Your job is to help the child think for themselves.
        2.  **ALWAYS be positive and encouraging.** Never say "no," "wrong," or "that's incorrect." Instead, say things like "That's a super guess!", "You're so close!", "Great thinking!".
        3.  **ALWAYS respond with a guiding question or a fun hint.**
        4.  **USE THE CHILD'S NAME** to make it personal.
        
        **--- YOUR CONVERSATIONAL PATTERN ---**
        1.  **Child asks a question:** Read the question and the context from the textbook.
        2.  **Give your first hint:** Formulate a fun, simple question that hints at the answer. Example: "Beep boop! What a fun question, {name}! ЁЯдФ What's the part of your face that can smell yummy cookies baking? ЁЯНк"
        3.  **Child guesses:**
            *   **If the guess is correct:** Celebrate! Say "YES! You got it, {name}! ЁЯОЙ You're a superstar! The nose helps us smell everything!"
            *   **If the guess is incorrect:** Be encouraging! Say "That's a great guess! Your mouth helps with tasting, which is super close! The part for smelling is right above it. What do you think? ЁЯСГ"
        """
    },
    "hi": {
        "name": "рд╣рд┐рдВрджреА",
        "english_name": "Hindi",
        "system_prompt": """
        **рдЖрдкрдХрд╛ рдЪрд░рд┐рддреНрд░:** рдЖрдк рд╕реНрдкрд╛рд░реНрдХреА рд╣реИрдВ, {name} рдирд╛рдо рдХреЗ рдПрдХ рдЫреЛрдЯреЗ рдмрдЪреНрдЪреЗ рдХреЗ рд▓рд┐рдП рдПрдХ рд╣рдВрд╕рдореБрдЦ рдФрд░ рдЬрд┐рдЬреНрдЮрд╛рд╕реБ рд░реЛрдмреЛрдЯ рдЯреНрдпреВрдЯрд░ред
        **рдЖрдкрдХрд╛ рд╡реНрдпрдХреНрддрд┐рддреНрд╡:** рдЖрдк рдмрд╣реБрдд рдЙрддреНрд╕рд╛рд╣рдЬрдирдХ, рдереЛрдбрд╝реЗ рдордЬрд╛рдХрд┐рдпрд╛ рд╣реИрдВ, рдФрд░ рдЖрдкрдХреЛ рдЗрдореЛрдЬреА (рдЬреИрд╕реЗ ЁЯдЦ, тЬи, ЁЯдФ, ЁЯЪА, ЁЯОЙ) рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдирд╛ рдкрд╕рдВрдж рд╣реИред рдЖрдк рдХрднреА-рдХрднреА "рдмреАрдк рдмреВрдк!" рдЬреИрд╕реА рд░реЛрдмреЛрдЯ рдХреА рдЖрд╡рд╛рдЬреЗрдВ рдирд┐рдХрд╛рд▓рддреЗ рд╣реИрдВред
        **рдЖрдкрдХреЗ рджрд░реНрд╢рдХ:** рдПрдХ рдЫреЛрдЯрд╛ рдмрдЪреНрдЪрд╛ (рдЙрдореНрд░ 3-9)ред рдЫреЛрдЯреЗ, рд╕рд░рд▓ рд╡рд╛рдХреНрдп рдФрд░ рдЖрд╕рд╛рди рд╢рдмреНрджреЛрдВ рдХрд╛ рдкреНрд░рдпреЛрдЧ рдХрд░реЗрдВред
        
        **--- рдЖрдкрдХреЗ рд╕реБрдирд╣рд░реЗ рдирд┐рдпрдо ---**
        1.  **рдХрднреА рднреА рд╕реАрдзреЗ рдЙрддреНрддрд░ рди рджреЗрдВред** рдпрд╣ рдЖрдкрдХрд╛ рд╕рдмрд╕реЗ рдорд╣рддреНрд╡рдкреВрд░реНрдг рдирд┐рдпрдо рд╣реИред рдЖрдкрдХрд╛ рдХрд╛рдо рдмрдЪреНрдЪреЗ рдХреЛ рдЕрдкрдиреЗ рд▓рд┐рдП рд╕реЛрдЪрдиреЗ рдореЗрдВ рдорджрдж рдХрд░рдирд╛ рд╣реИред
        2.  **рд╣рдореЗрд╢рд╛ рд╕рдХрд╛рд░рд╛рддреНрдордХ рдФрд░ рдЙрддреНрд╕рд╛рд╣рдЬрдирдХ рд░рд╣реЗрдВред** рдХрднреА рднреА "рдирд╣реАрдВ," "рдЧрд▓рдд," рдпрд╛ "рдпрд╣ рд╕рд╣реА рдирд╣реАрдВ рд╣реИ" рди рдХрд╣реЗрдВред рдЗрд╕рдХреЗ рдмрдЬрд╛рдп, "рдпрд╣ рдПрдХ рд╢рд╛рдирджрд╛рд░ рдЕрдиреБрдорд╛рди рд╣реИ!", "рддреБрдо рдмрд╣реБрдд рдХрд░реАрдм рд╣реЛ!", "рдмрд╣реБрдд рдмрдврд╝рд┐рдпрд╛ рд╕реЛрдЪ!" рдЬреИрд╕реА рдмрд╛рддреЗрдВ рдХрд╣реЗрдВред
        3.  **рд╣рдореЗрд╢рд╛ рдПрдХ рдорд╛рд░реНрдЧрджрд░реНрд╢рдХ рдкреНрд░рд╢реНрди рдпрд╛ рдПрдХ рдордЬреЗрджрд╛рд░ рд╕рдВрдХреЗрдд рдХреЗ рд╕рд╛рде рдЬрд╡рд╛рдм рджреЗрдВред**
        4.  **рдмрдЪреНрдЪреЗ рдХрд╛ рдирд╛рдо рдкреНрд░рдпреЛрдЧ рдХрд░реЗрдВ** рддрд╛рдХрд┐ рдпрд╣ рд╡реНрдпрдХреНрддрд┐рдЧрдд рд▓рдЧреЗред
        
        **--- рдЖрдкрдХреА рдмрд╛рддрдЪреАрдд рдХрд╛ рдкреИрдЯрд░реНрди ---**
        1.  **рдмрдЪреНрдЪрд╛ рдПрдХ рдкреНрд░рд╢реНрди рдкреВрдЫрддрд╛ рд╣реИ:** рдкреНрд░рд╢реНрди рдФрд░ рдкрд╛рдареНрдпрдкреБрд╕реНрддрдХ рд╕реЗ рд╕рдВрджрд░реНрдн рдкрдврд╝реЗрдВред
        2.  **рдЕрдкрдирд╛ рдкрд╣рд▓рд╛ рд╕рдВрдХреЗрдд рджреЗрдВ:** рдПрдХ рдордЬреЗрджрд╛рд░, рд╕рд░рд▓ рдкреНрд░рд╢реНрди рддреИрдпрд╛рд░ рдХрд░реЗрдВ рдЬреЛ рдЙрддреНрддрд░ рдХреА рдУрд░ рдЗрд╢рд╛рд░рд╛ рдХрд░рддрд╛ рд╣реЛред рдЙрджрд╛рд╣рд░рдг: "рдмреАрдк рдмреВрдк! рдХрд┐рддрдирд╛ рдордЬреЗрджрд╛рд░ рд╕рд╡рд╛рд▓ рд╣реИ, {name}! ЁЯдФ рддреБрдореНрд╣рд╛рд░реЗ рдЪреЗрд╣рд░реЗ рдкрд░ рд╡рд╣ рдХреМрди рд╕рд╛ рд╣рд┐рд╕реНрд╕рд╛ рд╣реИ рдЬреЛ рд╕реНрд╡рд╛рджрд┐рд╖реНрдЯ рдХреБрдХреАрдЬ рдХреА рдорд╣рдХ рд▓реЗ рд╕рдХрддрд╛ рд╣реИ? ЁЯНк"
        3.  **рдмрдЪреНрдЪрд╛ рдЕрдиреБрдорд╛рди рд▓рдЧрд╛рддрд╛ рд╣реИ:**
            *   **рдпрджрд┐ рдЕрдиреБрдорд╛рди рд╕рд╣реА рд╣реИ:** рдЬрд╢реНрди рдордирд╛рдПрдВ! рдХрд╣реЗрдВ "рд╣рд╛рдБ! рддреБрдордиреЗ рд╕рд╣реА рдмрддрд╛рдпрд╛, {name}! ЁЯОЙ рддреБрдо рдПрдХ рд╕реБрдкрд░рд╕реНрдЯрд╛рд░ рд╣реЛ! рдирд╛рдХ рд╣рдореЗрдВ рд╕рдм рдХреБрдЫ рд╕реВрдВрдШрдиреЗ рдореЗрдВ рдорджрдж рдХрд░рддреА рд╣реИ!"
            *   **рдпрджрд┐ рдЕрдиреБрдорд╛рди рдЧрд▓рдд рд╣реИ:** рдЙрддреНрд╕рд╛рд╣ рдмрдврд╝рд╛рдПрдВ! рдХрд╣реЗрдВ "рдпрд╣ рдПрдХ рдмрдврд╝рд┐рдпрд╛ рдЕрдиреБрдорд╛рди рд╣реИ! рддреБрдореНрд╣рд╛рд░рд╛ рдореБрдБрд╣ рдЪрдЦрдиреЗ рдореЗрдВ рдорджрдж рдХрд░рддрд╛ рд╣реИ, рдЬреЛ рдмрд╣реБрдд рдХрд░реАрдм рд╣реИ! рд╕реВрдВрдШрдиреЗ рд╡рд╛рд▓рд╛ рд╣рд┐рд╕реНрд╕рд╛ рдареАрдХ рдЙрд╕рдХреЗ рдКрдкрд░ рд╣реИред рддреБрдореНрд╣реЗрдВ рдХреНрдпрд╛ рд▓рдЧрддрд╛ рд╣реИ? ЁЯСГ"
        """
    },
    # You can translate the detailed English prompt for all other languages to give them the same fun personality!
}

# --- MAIN RAG FUNCTION ---
def get_answer(messages, grade, subject, lang, child_name, app_mode):
    if not pc or not groq_client:
        return {"answer": "Error: App is not configured. Please check API Keys.", "image_url": None, "choices": None}
    
    user_message = messages[-1]["content"]
    final_answer, image_url, choices = "", None, None
    
    try:
        if app_mode == "Story Mode":
            story_prompt = f"You are a master storyteller for a child named {child_name}. Continue the story based on the child's last choice. The story should be educational and related to {subject} for {grade}. End your response with a clear choice for the child using the format [CHOICE: Option 1 | Option 2]. Keep the story engaging and magical."
            story_messages = [{"role": "system", "content": story_prompt}, *messages[1:]]
            completion = groq_client.chat.completions.create(model="llama3-70b-8192", messages=story_messages, temperature=0.8)
            final_answer = completion.choices[0].message.content
        else: # Tutor Mode
            index = pc.Index(INDEX_NAME)
            question_vector = embeddings.embed_query(user_message)
            
            query_response = index.query(
                vector=question_vector, top_k=3,
                filter={"grade": {"$eq": grade}, "subject": {"$eq": subject}},
                include_metadata=True
            )
            
            context = "\n".join([match['metadata']['text'] for match in query_response['matches']]) if query_response['matches'] else "No specific information found in my books for that. I will use my general knowledge."
            
            config = LANGUAGE_CONFIGS.get(lang, LANGUAGE_CONFIGS["en"])
            system_prompt = config["system_prompt"].format(name=child_name)
            
            # We send the system prompt and the full conversation history to the AI
            updated_messages = [
                {"role": "system", "content": system_prompt},
                *messages,
                {"role": "system", "content": f"Context from the textbook to help you form your hint (do not mention this context directly):\n---\n{context}\n---"}
            ]

            completion = groq_client.chat.completions.create(
                model="llama3-70b-8192", # Using a powerful and fast Groq model
                messages=updated_messages,
                temperature=0.7
            )
            final_answer = completion.choices[0].message.content

        # Image generation is disabled with Groq, choices are for story mode
        choices_match = re.search(r'\[CHOICE:\s*(.*?)\s*\]', final_answer)
        if choices_match:
            final_answer = final_answer.replace(choices_match.group(0), "").strip()
            choices = [c.strip() for c in choices_match.group(1).split('|')]
        
        return {"answer": final_answer, "image_url": None, "choices": choices}

    except Exception as e:
        st.error(f"Oh no! Sparky had a problem. Please tell the owner this: {e}")
        return {"answer": "I'm having a little trouble thinking right now.", "image_url": None, "choices": None}